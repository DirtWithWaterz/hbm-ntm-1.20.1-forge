import org.apache.commons.io.IOUtils

buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
    }
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
//    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.7.0'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroupByRegex("software\\.bernie.*")
            includeGroup("com.eliotlash.mclib")
        }
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
    implementation("com.eliotlash.mclib:mclib:20")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")

    compileOnly fg.deobf("maven.modrinth:mekanism:${mekanism_version}")
    runtimeOnly fg.deobf("maven.modrinth:mekanism:${mekanism_version}")
    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

test {
    useJUnitPlatform()
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : "${semver}",
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy 'reobfJar'
}

tasks.named('publish').configure {
     dependsOn 'reobfJar'
}

publish {
//    dependsOn(tasks.modrinth)
//    dependsOn(tasks.curseforge)
}

static def getCurseforgeSDKValue(minecraft_sdk) {
    switch(minecraft_sdk) {
        case "forge": return "Forge"
        case "fabric": return "Fabric"
        case "neoforge": return "NeoForge"
        case "quilt": return "Quilt"
        default: throw new Exception("Unrecognized minecraft SDK")
    }
}

//curseforge {
//    apiKey = System.getenv("CURSEFORGE_API_KEY") ?: ""
//
//    project {
//        id = curse_project_id
//        releaseType = System.getenv('RELEASE_TYPE') ?: "alpha"
//        changelogType = 'markdown'
//        changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
//        addGameVersion getCurseforgeSDKValue(minecraft_sdk)
//        addGameVersion minecraft_version
//        addGameVersion "Java 17"
//        mainArtifact "build/libs/hbm-ntm-${minecraft_version}-${minecraft_sdk}-${version}-all.jar"
//        relations {
////            requiredDependency "architectury-api"
////            requiredDependency "markdownmanual"
////            requiredDependency "oc2r"
//        }
//    }
//}
//
//modrinth {
//    token = System.getenv("MODRINTH_TOKEN")
//    projectId = modrinth_project_id
//    versionType = System.getenv('RELEASE_TYPE') ?: "alpha"
//    uploadFile = "build/libs/hbm-ntm-${minecraft_version}-${minecraft_sdk}-${version}-all.jar"
//    gameVersions = [minecraft_version]
//    loaders = [minecraft_sdk]
//    changelog = System.getenv("CHANGELOG") ?: "Changelog not available."
//    dependencies {
////        required.project "architectury-api"
////        required.project "markdownmanual"
////        required.project "oc2r"
//    }
//}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
